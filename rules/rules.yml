version: '0.6.0'
storage:
  type: dict
backend:
  type: dnspython
  config:
    timeout: 2
plugins:
  - dnsmule_plugins
rules:
  - name: Microsoft Patterns
    type: regex
    record: txt
    config:
      name: MICROSOFT
      patterns:
        - regex: '^MS=ms'
          label: O365
        - regex: '^.*\.azurewebsites\.'
          identification: AZURE
  - name: Amazon Patterns
    type: regex
    record: txt
    config:
      name: AMAZON
      regex: '^amazonses:'
      label: SES
  - name: Generic Verification Records
    type: regex
    record: txt
    config:
      name: VERIFICATION
      patterns:
        - regex: '^(.+)(?:-(?:site|domain))?-verification='
          group: 1
        - regex: '^(.+)(?:site|domain)verification'
          group: 1
        - regex: '^(.+)_verify_'
          group: 1
        - regex: '^(\w+)-code:'
          group: 1
      group: 1
  - name: PTR Scaner
    type: ip.ptr
    record: A
    description:
      Scans PTR records for cloud providers.
  - name: Certificate Fetcher
    type: ip.certs
    record: A
    description:
      Checks certificates for more domains to scan and tags issuers.
      Also, records all certificates to result data.
  - name: IP-Range Scanner
    type: ip.ranges
    record: A
    description:
      Checks common cloud provider ipranges for matches.
    config:
      cache: true
  - name: textlog
    description: Logs possibly interesting TXT records
    type: dynamic
    record: txt
    config:
      separators:
        - '='
        - ':'
      code: |
        from logging import getLogger
        
        logger = getLogger('dnsmule.rules.textlog')
        seen = set()
        
        
        def partition_unique(value: str):
            for sign in Config.separators:
                if sign in value:
                    start, sep, end = value.partition(sign)
                    return start
        
        
        def process(record: Record, _: Result) -> None:
            key = partition_unique(record.text)
            if key and key not in seen:
                seen.add(key)
                logger.info('Found key %r from %r', key, record.name)
  - name: CNAME Identifier
    type: dynamic
    record: cname
    description: |
      Creates tags with the DNS::CIDER::TYPE::PROVIDER::SERVICE format.
      Also, appends CNAMEs to resolvedAliases in order to later map possible alias results back to correct domains.
    config:
      identities:
        - name: AKAMAI::EDGEKEY
          type: CDN
          value: edgekey.net
        - name: CLOUDFLARE::CLOUDFLARE
          type: CDN
          value: cloudflare.net
        - name: AMAZON::CLOUDFRONT
          type: CDN
          value: cloudfront.net
        - name: MICROSOFT::AZURE
          type: CDN
          value: azureedge.net
        - name: AMAZON::GLOBALACCELERATOR
          type: HA
          value: awsglobalaccelerator.com
        - name: AMAZON::AWS
          type: SAAS
          value: amazonaws.com
        - name: SIMPLI::SIMPLI
          type: ADS
          value: simple.fi
        - name: DOUBLECLICK::DOUBLECLICK
          type: ADS
          value: doubleclick.net
        - name: DIGITALOCEAN::APPPLATFORM
          type: VPS
          value: ondigitalocean.app
        - name: FASTLY::FASTLY
          type: CDN
          value: fastly.net
      code: |
        from dnsmule.utils import extend_set
        
        
        def process(record: Record, result: Result):
            extend_set(result.data, 'resolvedAliases', record.text)
            for o in Config.identities:
                key = o['value']
                if key in record.text:
                    result.tags.add('DNS::CIDER::%s::%s' % (
                        o['type'].upper(),
                        o['name'].upper(),
                    ))