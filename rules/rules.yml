version: '0.0.1'
backend:
  name: 'dnspython.DNSPythonBackend'
  config:
    timeout: 2
plugins:
  - name: dnsmule_plugins.CertCheckPlugin
    config:
      callback: false
  - name: dnsmule_plugins.IPRangesPlugin
  - name: dnsmule_plugins.PTRScanPlugin
rules:
  - name: o365
    type: dns.regex
    record: txt
    config:
      pattern: '^MS=ms'
      identification: MICROSOFT::O365
  - name: ses
    type: dns.regex
    record: txt
    config:
      pattern: '^amazonses:'
      identification: AMAZON::SES
  - name: azure
    type: dns.regex
    record: txt
    config:
      pattern: '^.*\.azurewebsites\.'
      identification: MICROSOFT::AZURE
  - name: generic_verification
    type: dns.regex
    record: txt
    config:
      patterns:
        - '^(.+)(?:-(?:site|domain))?-verification='
        - '^(.+)(?:site|domain)verification'
        - '^(.+)_verify_'
        - '^(\w+)-code:'
      group: 1
  - name: ptrscan
    type: ip.ptr
    record: A
    description:
      Scans PTR records for cloud providers.
  - name: certcheck
    type: ip.certs
    record: A
    description:
      Checks certificates for more domains to scan and tags issuers.
      Also, records all certificates to result data.
  - name: ipranges
    type: ip.ranges
    record: A
    description:
      Checks common cloud provider ipranges for matches.
    config:
      providers:
        - amazon
        - microsoft
        - google
  - name: textlog
    description: Logs possibly interesting TXT records
    type: dns.dynamic
    record: txt
    config:
      code: |
        from dnsmule.logger import get_logger
        
        logger = get_logger()
        seen = set()
        
        
        def process(record: Record) -> None:
            start, sep, end = record.text.partition('=')
            if sep and start not in seen:
                seen.add(start)
                logger.info('TEXTLOG: (%s %s) %s', str(record.type), record.domain, start)
  - name: cider
    type: dns.dynamic
    record: cname
    config:
      identities:
        - name: Akamai
          type: CDN
          value: edgekey.net
        - name: Cloudflare
          type: CDN
          value: cloudflare.net
        - name: Cloudfront
          type: CDN
          value: cloudfront.net
        - name: Azure
          type: CDN
          value: azureedge.net
        - name: Accelerator
          type: HA
          value: awsglobalaccelerator.com
        - name: AWS
          type: SAAS
          value: amazonaws.com
        - name: Simpli
          type: ADS
          value: simple.fi
        - name: Doubleclick
          type: ADS
          value: doubleclick.net
      code: |
        def process(record: Record) -> Result:
            for o in Config.identities:
                key = o['value']
                if key in record.text:
                    record.tag('DNS::CIDER::%s::%s' % (
                        o['type'].upper(),
                        o['name'].upper(),
                    ))